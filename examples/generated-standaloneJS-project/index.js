// Fastify plugin autogenerated by fastify-openapi-glue

import fastifyPlugin from "fastify-plugin";
import { Service } from "./service.js";
import { Security } from "./security.js";

function notImplemented(operationId) {
	return async () => {
		throw new Error(`Operation ${operationId} not implemented`);
	};
}

module.exports = fastifyPlugin(
	async function (fastify, opts) {
		fastify.route({
			method: "POST",
			url: "/pet",
			schema: {
				body: {
					type: "object",
					required: [name, photoUrls],
					properties: {
						id: {
							type: "integer",
							format: "int64",
						},
						category: {
							type: "object",
							properties: {
								id: {
									type: "integer",
									format: "int64",
								},
								name: {
									type: "string",
								},
							},
							xml: {
								name: "Category",
							},
						},
						name: {
							type: "string",
							example: "doggie",
						},
						photoUrls: {
							type: "array",
							xml: {
								name: "photoUrl",
								wrapped: true,
							},
							items: {
								type: "string",
							},
						},
						tags: {
							type: "array",
							xml: {
								name: "tag",
								wrapped: true,
							},
							items: {
								type: "object",
								properties: {
									id: {
										type: "integer",
										format: "int64",
									},
									name: {
										type: "string",
									},
								},
								xml: {
									name: "Tag",
								},
							},
						},
						status: {
							type: "string",
							description: "pet status in the store",
							enum: [available, pending, sold],
						},
					},
					xml: {
						name: "Pet",
					},
				},
			},
			config: undefined,
			handler: Service["addPet"].bind(Service),
		});

		fastify.route({
			method: "PUT",
			url: "/pet",
			schema: {
				body: {
					type: "object",
					required: [name, photoUrls],
					properties: {
						id: {
							type: "integer",
							format: "int64",
						},
						category: {
							type: "object",
							properties: {
								id: {
									type: "integer",
									format: "int64",
								},
								name: {
									type: "string",
								},
							},
							xml: {
								name: "Category",
							},
						},
						name: {
							type: "string",
							example: "doggie",
						},
						photoUrls: {
							type: "array",
							xml: {
								name: "photoUrl",
								wrapped: true,
							},
							items: {
								type: "string",
							},
						},
						tags: {
							type: "array",
							xml: {
								name: "tag",
								wrapped: true,
							},
							items: {
								type: "object",
								properties: {
									id: {
										type: "integer",
										format: "int64",
									},
									name: {
										type: "string",
									},
								},
								xml: {
									name: "Tag",
								},
							},
						},
						status: {
							type: "string",
							description: "pet status in the store",
							enum: [available, pending, sold],
						},
					},
					xml: {
						name: "Pet",
					},
				},
			},
			config: undefined,
			handler: Service["updatePet"].bind(Service),
		});

		fastify.route({
			method: "GET",
			url: "/pet/findByStatus",
			schema: {
				querystring: {
					type: "object",
					properties: {
						status: {
							description:
								"Status values that need to be considered for filter",
							type: "array",
						},
					},
					required: [status],
				},
			},
			config: undefined,
			handler: Service["findPetsByStatus"].bind(Service),
		});

		fastify.route({
			method: "GET",
			url: "/pet/findByTags",
			schema: {
				querystring: {
					type: "object",
					properties: {
						tags: {
							description: "Tags to filter by",
							type: "array",
						},
					},
					required: [tags],
				},
			},
			config: undefined,
			handler: Service["findPetsByTags"].bind(Service),
		});

		fastify.route({
			method: "GET",
			url: "/pet/:petId",
			schema: {
				params: {
					type: "object",
					properties: {
						petId: {
							description: "ID of pet to return",
							type: "integer",
						},
					},
					required: [petId],
				},
			},
			config: undefined,
			handler: Service["getPetById"].bind(Service),
		});

		fastify.route({
			method: "POST",
			url: "/pet/:petId",
			schema: {
				body: {
					type: "object",
					properties: {
						name: {
							description: "Updated name of the pet",
							type: "string",
						},
						status: {
							description: "Updated status of the pet",
							type: "string",
						},
					},
				},
				params: {
					type: "object",
					properties: {
						petId: {
							description: "ID of pet that needs to be updated",
							type: "integer",
						},
					},
					required: [petId],
				},
			},
			config: undefined,
			handler: Service["updatePetWithForm"].bind(Service),
		});

		fastify.route({
			method: "DELETE",
			url: "/pet/:petId",
			schema: {
				params: {
					type: "object",
					properties: {
						petId: {
							description: "Pet id to delete",
							type: "integer",
						},
					},
					required: [petId],
				},
			},
			config: undefined,
			handler: Service["deletePet"].bind(Service),
		});

		fastify.route({
			method: "POST",
			url: "/pet/:petId/uploadImage",
			schema: {
				body: {
					type: "object",
					properties: {
						additionalMetadata: {
							description: "Additional data to pass to server",
							type: "string",
						},
						file: {
							description: "file to upload",
							type: "string",
						},
					},
				},
				params: {
					type: "object",
					properties: {
						petId: {
							description: "ID of pet to update",
							type: "integer",
						},
					},
					required: [petId],
				},
			},
			config: undefined,
			handler: Service["uploadFile"].bind(Service),
		});

		fastify.route({
			method: "GET",
			url: "/store/inventory",
			schema: {},
			config: undefined,
			handler: Service["getInventory"].bind(Service),
		});

		fastify.route({
			method: "POST",
			url: "/store/order",
			schema: {
				body: {
					type: "object",
					properties: {
						id: {
							type: "integer",
							format: "int64",
						},
						petId: {
							type: "integer",
							format: "int64",
						},
						quantity: {
							type: "integer",
							format: "int32",
						},
						shipDate: {
							type: "string",
							format: "date-time",
						},
						status: {
							type: "string",
							description: "Order Status",
							enum: [placed, approved, delivered],
						},
						complete: {
							type: "boolean",
							default: false,
						},
					},
					xml: {
						name: "Order",
					},
				},
			},
			config: undefined,
			handler: Service["placeOrder"].bind(Service),
		});

		fastify.route({
			method: "GET",
			url: "/store/order/:orderId",
			schema: {
				params: {
					type: "object",
					properties: {
						orderId: {
							description: "ID of pet that needs to be fetched",
							type: "integer",
						},
					},
					required: [orderId],
				},
			},
			config: undefined,
			handler: Service["getOrderById"].bind(Service),
		});

		fastify.route({
			method: "DELETE",
			url: "/store/order/:orderId",
			schema: {
				params: {
					type: "object",
					properties: {
						orderId: {
							description: "ID of the order that needs to be deleted",
							type: "integer",
						},
					},
					required: [orderId],
				},
			},
			config: undefined,
			handler: Service["deleteOrder"].bind(Service),
		});

		fastify.route({
			method: "POST",
			url: "/user",
			schema: {
				body: {
					type: "object",
					properties: {
						id: {
							type: "integer",
							format: "int64",
						},
						username: {
							type: "string",
						},
						firstName: {
							type: "string",
						},
						lastName: {
							type: "string",
						},
						email: {
							type: "string",
						},
						password: {
							type: "string",
						},
						phone: {
							type: "string",
						},
						userStatus: {
							type: "integer",
							format: "int32",
							description: "User Status",
						},
					},
					xml: {
						name: "User",
					},
				},
			},
			config: undefined,
			handler: Service["createUser"].bind(Service),
		});

		fastify.route({
			method: "POST",
			url: "/user/createWithArray",
			schema: {
				body: {
					type: "array",
					items: {
						type: "object",
						properties: {
							id: {
								type: "integer",
								format: "int64",
							},
							username: {
								type: "string",
							},
							firstName: {
								type: "string",
							},
							lastName: {
								type: "string",
							},
							email: {
								type: "string",
							},
							password: {
								type: "string",
							},
							phone: {
								type: "string",
							},
							userStatus: {
								type: "integer",
								format: "int32",
								description: "User Status",
							},
						},
						xml: {
							name: "User",
						},
					},
				},
			},
			config: undefined,
			handler: Service["createUsersWithArrayInput"].bind(Service),
		});

		fastify.route({
			method: "POST",
			url: "/user/createWithList",
			schema: {
				body: {
					type: "array",
					items: {
						type: "object",
						properties: {
							id: {
								type: "integer",
								format: "int64",
							},
							username: {
								type: "string",
							},
							firstName: {
								type: "string",
							},
							lastName: {
								type: "string",
							},
							email: {
								type: "string",
							},
							password: {
								type: "string",
							},
							phone: {
								type: "string",
							},
							userStatus: {
								type: "integer",
								format: "int32",
								description: "User Status",
							},
						},
						xml: {
							name: "User",
						},
					},
				},
			},
			config: undefined,
			handler: Service["createUsersWithListInput"].bind(Service),
		});

		fastify.route({
			method: "GET",
			url: "/user/login",
			schema: {
				querystring: {
					type: "object",
					properties: {
						username: {
							description: "The user name for login",
							type: "string",
						},
						password: {
							description: "The password for login in clear text",
							type: "string",
						},
					},
					required: [username, password],
				},
			},
			config: undefined,
			handler: Service["loginUser"].bind(Service),
		});

		fastify.route({
			method: "GET",
			url: "/user/logout",
			schema: {},
			config: undefined,
			handler: Service["logoutUser"].bind(Service),
		});

		fastify.route({
			method: "GET",
			url: "/user/:username",
			schema: {
				params: {
					type: "object",
					properties: {
						username: {
							description:
								"The name that needs to be fetched. Use user1 for testing. ",
							type: "string",
						},
					},
					required: [username],
				},
			},
			config: undefined,
			handler: Service["getUserByName"].bind(Service),
		});

		fastify.route({
			method: "PUT",
			url: "/user/:username",
			schema: {
				body: {
					type: "object",
					properties: {
						id: {
							type: "integer",
							format: "int64",
						},
						username: {
							type: "string",
						},
						firstName: {
							type: "string",
						},
						lastName: {
							type: "string",
						},
						email: {
							type: "string",
						},
						password: {
							type: "string",
						},
						phone: {
							type: "string",
						},
						userStatus: {
							type: "integer",
							format: "int32",
							description: "User Status",
						},
					},
					xml: {
						name: "User",
					},
				},
				params: {
					type: "object",
					properties: {
						username: {
							description: "name that need to be updated",
							type: "string",
						},
					},
					required: [username],
				},
			},
			config: undefined,
			handler: Service["updateUser"].bind(Service),
		});

		fastify.route({
			method: "DELETE",
			url: "/user/:username",
			schema: {
				params: {
					type: "object",
					properties: {
						username: {
							description: "The name that needs to be deleted",
							type: "string",
						},
					},
					required: [username],
				},
			},
			config: undefined,
			handler: Service["deleteUser"].bind(Service),
		});
	},
	{ fastify: "^4.x" },
);
